@startuml
skinparam classAttributeIconSize 0
' skinparam linetype ortho
skinparam visibilityModifier true

' ============================= '
'          ENUM 정의            '
' ============================= '

enum eBookGenre {
  Fantasy
  Romance
  Horror
  Mystery
  SciFi
  NonFiction
}

enum eBookMood {
  Dark
  Light
  Emotional
  Tense
  Whimsical
}

enum eBookCondition {
  Perfect,   // 100% - 완벽한 상태, 새 책 수준
  Worn,      // 80% 이상 ~ 99% - 약간 낡았지만 양호
  Damaged,   // 40% 이상 ~ 79% - 눈에 띄는 손상 있음
  Destroyed  // 0% 이상 ~ 39% - 거의 파손, 사용 불가
}

enum eDamageType {
  Water
  Fire
  MagicCurse
  Tear
  Lost
}

enum eNPCType {
  Student
  Wizard
  Merchant
  Librarian
  # 계속 확장 가능능
}

' ============================= '
'         추상 클래스           '
' ============================= '

abstract class Book {
  - string title
  - string description
  - Genre genre
  - Mood mood
  - int length # 책 분량(페이지 수)
  - bool isDamaged
  - DamageType damageType
  - BookCondition condition

  + void repair()
  + void displayInfo()
}
note right of Book
  다양한 장르/속성의 책이
  계속해서 추가될 예정
end note

abstract class NPC {
  - string name
  - Genre preferredGenre
  - Mood preferredMood
  - List<Book> inventory
  - int gold
  - int magicPower

  + Book requestBook(List<Book> candidates)
  + bool rateBook(Book book)
  + void compensateForDamage(Book book)
}
note left of NPC
  새로운 NPC 타입 지속 추가 예정
  (학생, 마법사, 상인 등)
end note

abstract class MiniGame {
  + bool play(Book book)
}
note right of MiniGame
  다양한 미니게임이
  (불필요한 행정 시스템이 모티브)
  계속해서 추가될 예정
end note

' ============================= '
'         구체 클래스           '
' ============================= '

class FantasyBook extends Book {
  + void displayInfo()
}

class ScienceBook extends Book {
  + void displayInfo()
}

class StudentNPC extends NPC {
  + Book requestBook(List<Book> candidates)
  + bool rateBook(Book book)
}

class WizardNPC extends NPC {
  + Book requestBook(List<Book> candidates)
  + bool rateBook(Book book)
}

class TypingGame extends MiniGame {
  + bool play(Book book)
}

class PuzzleGame extends MiniGame {
  + bool play(Book book)
}

' ============================= '
'         시스템 클래스         '
' ============================= '

class Inventory {
  - List<Book> books
  + void addBook(Book book)
  + void removeBook(int index)
  + Book findBook(string title)
}

class LevelSystem {
  - int experience
  - int level
  + void gainExp(int amount)
  + bool checkLevelUp()
  + int getLevel()
}

class ScoreSystem {
  - int score
  - int grade
  + void updateScore(bool satisfied)
  + int getScore()
  + int getGrade()
}

class UIManager {
  + void displayMainMenu()
  + void displayInventory(Inventory inventory)
  + void displayNPCInteraction(NPC npc)
  + void displayBookDetail(Book book)
  + void displayBookCondition(BookCondition bc)
  + void displayPenaltyInfo(int gold, int mp)
  + void displayAsciiArt(string art)
  + void displayLevelUpMessage(int level)
  + int getUserInput(string prompt)
  + void displayModeSelection()
  + void displayMiniGameResult(string result)
}

class GameManager {
  - Inventory inventory
  - List<NPC> npcs
  - List<MiniGame> miniGames
  - int day
  - int gold
  - int magicPower
  - LevelSystem levelSystem
  - ScoreSystem scoreSystem
  - UIManager uiManager
  + void startDay()
  + void writeBook()
  + void serveNPCs()
  + void dailySummary()
  + void endDay()
}

class PenaltySystem {
  + static int calculateGoldPenalty(Book book)
  + static int calculateMagicPenalty(Book book)
}

class BookFactory {
  + static Book createRandomBook()
  + static Book createBook(Genre genre, Mood mood, int length)
}


' ============================= '
'       관계 및 의존성 설정      '
' ============================= '

GameManager --> Inventory
GameManager --> NPC
GameManager --> MiniGame
GameManager --> LevelSystem
GameManager --> ScoreSystem
GameManager --> UIManager

Inventory --> Book
NPC --> Book : 요청
MiniGame --> Book : 플레이 대상
ScoreSystem --> NPC

UIManager ..> Book : <<uses>>
UIManager ..> NPC : <<uses>>

GameManager ..> BookFactory : <<uses>>

@enduml